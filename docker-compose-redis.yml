version: '3.8'

services:
  catalogue-redis:
    build:
      context: .
      dockerfile: ./docker/catalogue/Dockerfile
    image: catalogue-redis:latest
    container_name: catalogue-redis
    hostname: catalogue
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - reschedule=on-node-failure
    depends_on:
      - catalogue-db
      - redis
    command: ["/app", "-port=8080", "-redis=redis:6379", "-DSN=catalogue_user:default_password@tcp(catalogue-db:3306)/socksdb"]
    networks:
      - catalogue-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  catalogue-db:
    build:
      context: ./docker/catalogue-db/
    image: weaveworksdemos/catalogue-db
    container_name: catalogue-db
    hostname: catalogue-db
    restart: unless-stopped
    environment:
      - reschedule=on-node-failure
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_DATABASE=socksdb
    ports:
      - "3306:3306"
    volumes:
      - catalogue_db_data:/var/lib/mysql
    networks:
      - catalogue-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: catalogue-redis-cache
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --loglevel warning
    environment:
      - reschedule=on-node-failure
    volumes:
      - redis_data:/data
    networks:
      - catalogue-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Optional: Redis Commander for cache inspection
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    hostname: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=redis123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - catalogue-network
    profiles:
      - tools

  # Optional: Performance monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: catalogue-prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - catalogue-network
    profiles:
      - monitoring

volumes:
  catalogue_db_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  catalogue-network:
    driver: bridge
    name: catalogue-network
